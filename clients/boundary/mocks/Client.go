// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	targets "github.com/hashicorp/boundary/api/targets"
	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// CreateTarget provides a mock function with given fields: name, address, port, scopeId
func (_m *Client) CreateTarget(name string, address string, port uint32, scopeId string) (*targets.Target, error) {
	ret := _m.Called(name, address, port, scopeId)

	var r0 *targets.Target
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, uint32, string) (*targets.Target, error)); ok {
		return rf(name, address, port, scopeId)
	}
	if rf, ok := ret.Get(0).(func(string, string, uint32, string) *targets.Target); ok {
		r0 = rf(name, address, port, scopeId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*targets.Target)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, uint32, string) error); ok {
		r1 = rf(name, address, port, scopeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTargetsWithPrefix provides a mock function with given fields: prefix, scopeId
func (_m *Client) DeleteTargetsWithPrefix(prefix string, scopeId string) error {
	ret := _m.Called(prefix, scopeId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(prefix, scopeId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindProjectIDByName provides a mock function with given fields: org, name
func (_m *Client) FindProjectIDByName(org string, name string) (string, error) {
	ret := _m.Called(org, name)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(org, name)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(org, name)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(org, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t mockConstructorTestingTNewClient) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
